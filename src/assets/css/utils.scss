.absolute {
  position: absolute;
}

.relative {
  position: relative;
}

.flex {
  display: flex;
}

.flex-col {
  flex-direction: column;
}

.flex-row-reverse {
  flex-direction: row-reverse;
}

.flex-col-reverse {
  flex-direction: column-reverse;
}

.flex-shrink-0 {
  flex-shrink: 0;
}

.flex-wrap {
  flex-wrap: wrap;
}

.item-center {
  align-items: center;
}

.inline {
  display: inline-block;
}

.items-stretch {
  align-items: stretch;
}

// flex item
.self-stretch {
  align-self: stretch;
}

// width & height
$widths: (
  "full": "100%",
  "1-2": "50%",
  "1-3": "33.333333333333%",
  "1-4": "25%",
  "2-3": "66.666666666666%",
);

@each $name, $width in $widths {
  .w-#{$name} {
    width: #{$width};
  }

  .min-w-#{$name} {
    min-width: #{$width};
  }

  .h-#{$name} {
    height: #{$width};
  }
}

.w-screen {
  width: 100vw;
}

.h-screen {
  height: 100vh;
}

// scroll
.overflow-y-auto {
  overflow-y: auto;
}

.overflow-x-auto {
  overflow-x: auto;
}

.overflow-x-hidden {
  overflow-x: hidden;
}

.overflow-y-hidden {
  overflow-y: hidden;
}

.overflow-hidden {
  overflow: hidden;
}

// typo
.break-words {
  overflow-wrap: break-word;
}

// z-index
$steps: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

@each $index in $steps {
  .z-#{$index} {
    z-index: #{$index * 10};
  }
}

// spacing
$sizes: (
  "0": 0rem,
  "px": 0.0625rem,
  // 1px
  "1": 0.125rem,
  // 2px
  "2": 0.25rem,
  // 4px
  "3": 0.375rem,
  // 6px
  "4": 0.5rem,
  // 8px
  "5": 0.625rem,
  // 10px
  "6": 0.75rem,
  // 12px
  "7": 0.875rem,
  // 14px
  "8": 1rem,
  // 16px
  "9": 1.125rem,
  // 18px
  "10": 1.25rem,
  // 20px
  "11": 1.375rem,
  // 22px
  "12": 1.5rem // 24px,,,,,
);

@each $index, $size in $sizes {
  .gap-#{$index} {
    gap: #{$size};
  }
}

@each $index, $size in $sizes {
  .p-#{$index} {
    padding: #{$size};
  }
  .pt-#{$index} {
    padding-top: #{$size};
  }
  .pb-#{$index} {
    padding-bottom: #{$size};
  }
  .pl-#{$index} {
    padding-left: #{$size};
  }
  .pr-#{$index} {
    padding-right: #{$size};
  }
  .px-#{$index} {
    padding-left: #{$size};
    padding-right: #{$size};
  }
  .py-#{$index} {
    padding-top: #{$size};
    padding-bottom: #{$size};
  }

  .m-#{$index} {
    padding: #{$size};
  }
  .mt-#{$index} {
    padding-top: #{$size};
  }
  .mb-#{$index} {
    padding-bottom: #{$size};
  }
  .ml-#{$index} {
    padding-left: #{$size};
  }
  .mr-#{$index} {
    padding-right: #{$size};
  }

  .mx-#{$index} {
    margin-left: #{$size};
    margin-right: #{$size};
  }
  .my-#{$index} {
    margin-top: #{$size};
    margin-bottom: #{$size};
  }

  .w-#{$index} {
    width: #{$size};
  }

  .h-#{$index} {
    height: #{$size};
  }

  .top-#{$index} {
    top: #{$size};
  }

  .left-#{$index} {
    left: #{$size};
  }

  .right-#{$index} {
    right: #{$size};
  }

  .bottom-#{$index} {
    bottom: #{$size};
  }
}

// touch / click

.cursor-pointer {
  cursor: pointer;
}

.pointer-events-none {
  pointer-events: none;
}

ul,
li {
  padding: 0;
  margin: 0;
  list-style-type: none;
}

.font-bold {
  font-weight: 600;
}

.font-heavy {
  font-weight: 800;
}

.text-center {
  text-align: center;
}

// Colors

$colors-list: (("grey", hsl(0, 0%, 20%)), ("green", #295742));

$num-shades: 10; // Number of shades to generate
$step: 8; // Amount to lighten or darken for each shade

// Initialize the color map
$colors: ();

@each $color-tuple in $colors-list {
  $color-name: nth($color-tuple, 1);
  $base-color: nth($color-tuple, 2);

  // Generate the color palette for each base color
  @for $i from $num-shades through 1 {
    $shade: lighten($base-color, ($i - 1) * $step);
    $shade-name: "#{$color-name}-#{$i}00";
    $shade-value: $shade;
    $colors: map-merge(
      $colors,
      (
        $shade-name: $shade-value,
      )
    );

    // Generate utility class for each shade
    .text-#{$shade-name} {
      color: $shade;
    }
  }

  .hidden {
    display: none;
  }

  .user-select-none {
    user-select: none;
  }
}
